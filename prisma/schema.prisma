// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

generator prismabox {
  provider                    = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName   = "t"
  inputModel                  = true
  output                      = "../src/models"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SKStatus {
  VERIFY
  APPROVED
  REVISED
  REJECTED
}

enum SKType {
  KEMATIAN
  TIDAK_MAMPU
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  SIRI
}

enum Gender {
  MALE
  FEMALE
}

model user {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(60)
  email          String         @unique
  password       String
  born_birth     DateTime?
  born_place     String?
  gender         Gender?
  work           String?
  marital_status MaritalStatus?
  nik            String?        @unique
  religion       String?
  address        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt

  user_sks             user_sk[]
  refresh_tokens       refresh_tokens[]
  user_roles           user_has_roles[]
  user_permissions     user_has_permissions[]
  user_sk_has_approver user_sk_has_approver[]
  sk_approver_settings sk_approver_settings[]
}

model roles {
  id         String    @id @default(cuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  user_roles  user_has_roles[]
  permissions role_has_permissions[]
}

model user_has_roles {
  id         String    @id @default(cuid())
  user_id    String
  role_id    String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user user  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role roles @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model permissions {
  id         String    @id @default(cuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  role_permissions role_has_permissions[]
  user_permissions user_has_permissions[]
}

model role_has_permissions {
  id            String    @id @default(cuid())
  role_id       String
  permission_id String
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime?

  role       roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
}

model user_has_permissions {
  id            String    @id @default(cuid())
  user_id       String
  permission_id String
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime?

  user       user        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permission permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
}

model refresh_tokens {
  id        String   @id @default(cuid())
  user_id   String
  token     String   @db.VarChar(1024)
  isRevoked Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())

  user user @relation(fields: [user_id], references: [id])
}

model user_sk {
  id        String    @id @default(cuid())
  user_id   String
  sk_type   SKType
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user           user                   @relation(fields: [user_id], references: [id])
  sk_kematian    sk_kematian?
  sk_tidak_mampu sk_tidak_mampu?
  user_approvers user_sk_has_approver[]
}

model user_sk_has_approver {
  id               String    @id @default(cuid())
  user_sk_id       String
  user_approver_id String
  status           SKStatus
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  user_sk  user_sk @relation(fields: [user_sk_id], references: [id], onDelete: Cascade)
  approver user    @relation(fields: [user_approver_id], references: [id])

  @@unique([user_sk_id, user_approver_id])
}

model sk_approver_settings {
  id               String    @id @default(cuid())
  sk_type          SKType
  user_approver_id String
  is_active        Boolean   @default(true)
  order_priority   Int       @default(1)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  approver user @relation(fields: [user_approver_id], references: [id], onDelete: Cascade)

  @@unique([sk_type, user_approver_id])
  @@index([sk_type, is_active, order_priority])
}

model sk_kematian {
  id           String    @id @default(cuid())
  name         String
  born_birth   DateTime
  born_place   String
  nik          String
  gender       Gender
  religion     String
  address      String
  death_date   DateTime
  death_place  String
  death_reason String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  user_sk_id String?  @unique
  user_sk    user_sk? @relation(fields: [user_sk_id], references: [id], onDelete: Cascade)
}

model sk_tidak_mampu {
  id             String        @id @default(cuid())
  name           String
  born_birth     DateTime
  born_place     String
  gender         Gender
  nik            String
  religion       String
  address        String
  reason         String
  work           String
  marital_status MaritalStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt

  user_sk_id String?  @unique
  user_sk    user_sk? @relation(fields: [user_sk_id], references: [id], onDelete: Cascade)
}
