// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SKStatus {
  VERIFY
  APPROVED
  REVISED
  REJECTED
}

enum SKType {
  KEMATIAN
  TIDAK_MAMPU
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  SIRI
}

enum Gender {
  MALE
  FEMALE
}

model user {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(60)
  email          String         @unique
  password       String
  role           UserRole?      @default(USER)
  born_birth     DateTime?
  born_place     String?
  gender         Gender?
  work           String?
  marital_status MaritalStatus?
  nik            String?        @unique
  religion       String?
  address        String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt

  user_sks       user_sk[]
  refresh_tokens refresh_tokens[]
}

model refresh_tokens {
  id             String         @id @default(cuid())
  user_id        String
  token          String         @db.VarChar(1024)
  isRevoked      Boolean        @default(false)
  expiredAt      DateTime
  createdAt      DateTime       @default(now())

  user           user           @relation(fields: [user_id], references: [id])
}

model user_sk {
  id        String    @id @default(cuid())
  user_id   String
  sk_type   SKType
  sk_status SKStatus  @default(VERIFY)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user           user            @relation(fields: [user_id], references: [id])
  sk_kematian    sk_kematian?
  sk_tidak_mampu sk_tidak_mampu?
}

model sk_kematian {
  id           String    @id @default(cuid())
  name         String
  born_birth   DateTime
  born_place   String
  nik          String
  gender       Gender
  religion     String
  address      String
  death_date   DateTime
  death_place  String
  death_reason String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  user_sk_id String?  @unique
  user_sk    user_sk? @relation(fields: [user_sk_id], references: [id], onDelete: Cascade)
}

model sk_tidak_mampu {
  id             String        @id @default(cuid())
  name           String
  born_birth     DateTime
  born_place     String
  gender         Gender
  nik            String
  religion       String
  address        String
  reason         String
  work           String
  marital_status MaritalStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt

  user_sk_id String?  @unique
  user_sk    user_sk? @relation(fields: [user_sk_id], references: [id], onDelete: Cascade)
}
